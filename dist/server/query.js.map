{"version":3,"file":"query.js","sources":["../../src/fragments.js","../../src/query.js","../../src/components/Captcha/query.js","../../src/components/SelectorList/query.js","../../src/components/Date/query.js","../../src/components/Email/query.js","../../src/components/Html/query.js","../../src/components/Number/query.js","../../src/components/Phone/query.js","../../src/components/Select/query.js","../../src/components/Textarea/query.js","../../src/components/Input/query.js","../../src/components/Section/query.js","../../src/components/Fileupload/query.js","../../src/components/Name/query.js","../../src/container/FormBuilder/PageNav/query.js"],"sourcesContent":["export const conditionalLogicFragment = /* GraphQL */ `\n  actionType\n  logicType\n  rules {\n    fieldId\n    operator\n    value\n  }\n`;\n\nexport const formConfirmationFragment = /* GraphQL */ `\n  conditionalLogic {\n    ${conditionalLogicFragment}\n  }\n  id\n  isActive\n  isDefault\n  message\n  name\n  pageId\n  queryString\n  type\n  url\n  page {\n    node {\n      link\n    }\n  }\n`;\n\nexport const submitButtonFragment = /* GraphQL */ `\n  conditionalLogic {\n    ${conditionalLogicFragment}\n  }\n  imageUrl\n  text\n  type\n`;\n","import { captchaFieldFragment } from \"./components/Captcha/query\";\nimport {\n  textFieldFragment,\n  hiddenFieldFragment,\n} from \"./components/Input/query\";\nimport { htmlFieldFragment } from \"./components/Html/query\";\nimport {\n  selectFieldFragment,\n  multiSelectFieldFragment,\n} from \"./components/Select/query\";\nimport { phoneFieldFragment } from \"./components/Phone/query\";\nimport { numberFieldFragment } from \"./components/Number/query\";\nimport {\n  radioFieldFragment,\n  checkboxFieldFragment,\n} from \"./components/SelectorList/query\";\n\nimport { dateFieldFragment } from \"./components/Date/query\";\nimport { sectionFieldFragment } from \"./components/Section/query\";\nimport { textareaFieldFragment } from \"./components/Textarea/query\";\nimport { formConfirmationFragment, submitButtonFragment } from \"./fragments\";\nimport { emailFieldFragment } from \"./components/Email/query\";\nimport { fileuploadFieldFragment } from \"./components/Fileupload/query\";\nimport { nameFieldFragment } from \"./components/Name/query\";\nimport { pageFieldFragment } from \"./container/FormBuilder/PageNav/query\";\n\nexport const submitMutationQuery = /* GraphQL */ `\n  mutation submitForm($id: ID!, $fieldValues: [FormFieldValuesInput]!) {\n    submitGfForm(input: { id: $id, fieldValues: $fieldValues }) {\n      errors {\n        id\n        message\n      }\n    }\n  }\n`;\n\nexport const gravityFormQuery = /* GraphQL */ `\n  query GetGravityForm($id: ID!) {\n    gfForm(id: $id, idType: DATABASE_ID) {\n      databaseId\n      description\n      descriptionPlacement\n      labelPlacement\n      subLabelPlacement\n      title\n      submitButton {\n        ${submitButtonFragment}\n      }\n      confirmations {\n        ${formConfirmationFragment}\n      }\n      hasHoneypot\n      formFields(first: 999){\n        nodes {\n          displayOnly\n          id: databaseId\n          inputType\n          layoutGridColumnSpan\n          layoutSpacerGridColumnSpan\n          pageNumber\n          type\n          visibility\n          ${captchaFieldFragment}\n          ${checkboxFieldFragment}\n          ${dateFieldFragment}\n          ${emailFieldFragment}\n          ${hiddenFieldFragment}\n          ${htmlFieldFragment}\n          ${numberFieldFragment}\n          ${phoneFieldFragment}\n          ${radioFieldFragment}\n          ${selectFieldFragment}\n          ${multiSelectFieldFragment}\n          ${textareaFieldFragment}\n          ${textFieldFragment}\n          ${sectionFieldFragment}\n          ${fileuploadFieldFragment}\n          ${nameFieldFragment}\n          ${pageFieldFragment}\n        }\n      }\n      pagination {\n        pageNames\n        lastPageButton {\n          text\n          type\n          imageUrl\n        }\n        hasProgressbarOnConfirmation\n        progressbarCompletionText\n        style\n        type\n        color\n        backgroundColor\n      }\n    }\n    gfSettings {\n      recaptcha {\n        publicKey\n        type\n      }\n      currency\n    }\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const captchaFieldFragment = /* GraphQL */ `\n  ... on CaptchaField {\n    captchaLanguage\n    captchaTheme\n    captchaType\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    label\n    simpleCaptchaBackgroundColor\n    simpleCaptchaFontColor\n    simpleCaptchaSize\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const checkboxFieldFragment = /* GraphQL */ `\n  ... on CheckboxField {\n    adminLabel\n    canPrepopulate\n    checkboxValues {\n      inputId\n      value\n    }\n    choices {\n      ... on CheckboxFieldChoice {\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    hasChoiceValue\n    hasSelectAll\n    inputs {\n      ... on CheckboxInputProperty {\n        id\n        name\n        label\n      }\n    }\n    inputName\n    isRequired\n    label\n  }\n`;\n\nexport const radioFieldFragment = /* GraphQL */ `\n  ... on RadioField {\n    adminLabel\n    canPrepopulate\n    choices {\n      ... on RadioFieldChoice {\n        isOtherChoice\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    hasChoiceValue\n    hasOtherChoice\n    errorMessage\n    inputName\n    isRequired\n    label\n    shouldAllowDuplicates\n    value\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const dateFieldFragment = /* GraphQL */ `\n  ... on DateField {\n    adminLabel\n    calendarIconType\n    calendarIconUrl\n    canPrepopulate\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    dateFormat\n    dateType\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    inputName\n    inputs {\n      ... on DateInputProperty {\n        id\n        autocompleteAttribute\n        customLabel\n        defaultValue\n        label\n        placeholder\n      }\n    }\n    isRequired\n    label\n    placeholder\n    shouldAllowDuplicates\n    subLabelPlacement\n    value\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const emailFieldFragment = /* GraphQL */ `\n  ... on EmailField {\n    adminLabel\n    canPrepopulate\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    hasEmailConfirmation\n    inputName\n    inputs {\n      ... on EmailInputProperty {\n        id\n        name\n        autocompleteAttribute\n        customLabel\n        defaultValue\n        label\n        placeholder\n      }\n    }\n    isRequired\n    label\n    placeholder\n    shouldAllowDuplicates\n    size\n    subLabelPlacement\n    value\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const htmlFieldFragment = /* GraphQL */ `\n  ... on HtmlField {\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    content\n    cssClass\n    hasMargins\n    label\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\n\nexport const numberFieldFragment = /* GraphQL */ `\n  ... on NumberField {\n    adminLabel\n    autocompleteAttribute\n    calculationFormula\n    calculationRounding\n    canPrepopulate\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputName\n    isCalculation\n    isRequired\n    label\n    numberFormat\n    placeholder\n    rangeMax\n    rangeMin\n    shouldAllowDuplicates\n    size\n    value\n  }\n`;\n\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const phoneFieldFragment = /* GraphQL */ `\n  ... on PhoneField {\n    adminLabel\n    autocompleteAttribute\n    canPrepopulate\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputName\n    isRequired\n    label\n    phoneFormat\n    placeholder\n    shouldAllowDuplicates\n    size\n    value\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const selectFieldFragment = /* GraphQL */ `\n  ... on SelectField {\n    adminLabel\n    autocompleteAttribute\n    canPrepopulate\n    choices {\n      ... on SelectFieldChoice {\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    hasChoiceValue\n    hasEnhancedUI\n    inputName\n    isRequired\n    label\n    placeholder\n    shouldAllowDuplicates\n    size\n    value\n  }\n`;\n\nexport const multiSelectFieldFragment = /* GraphQL */ `\n  ... on MultiSelectField {\n    adminLabel\n    canPrepopulate\n    choices {\n      ... on MultiSelectFieldChoice {\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    hasChoiceValue\n    hasEnhancedUI\n    errorMessage\n    inputName\n    isRequired\n    label\n    size\n    values\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const textareaFieldFragment = /* GraphQL */ `\n  ... on TextAreaField {\n    adminLabel\n    canPrepopulate\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    inputName\n    isRequired\n    label\n    maxLength\n    shouldAllowDuplicates\n    placeholder\n    size\n    hasRichTextEditor\n    value\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const textFieldFragment = /* GraphQL */ `\n  ... on TextField {\n    adminLabel\n    autocompleteAttribute\n    canPrepopulate\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputMaskValue\n    inputName\n    isPasswordInput\n    isRequired\n    label\n    labelPlacement\n    layoutGridColumnSpan\n    maxLength\n    placeholder\n    shouldAllowDuplicates\n    size\n    value\n  }\n`;\n\nexport const hiddenFieldFragment = /* GraphQL */ `\n  ... on HiddenField {\n    canPrepopulate\n    defaultValue\n    inputName\n    label\n    value\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const sectionFieldFragment = /* GraphQL */ `\n... on SectionField {\n  cssClass\n  databaseId\n  label\n  type\n  description\n  displayOnly\n  visibility\n  layoutGridColumnSpan\n  layoutSpacerGridColumnSpan\n  conditionalLogic {\n    ${conditionalLogicFragment}\n  }\n}\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const fileuploadFieldFragment = /* GraphQL */ `\n  ... on FileUploadField {\n    adminLabel\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    isRequired\n    label\n    value\n    allowedExtensions\n    canAcceptMultipleFiles\n    inputType\n    maxFileSize\n    maxFiles\n    type\n  }\n`;\n","import { conditionalLogicFragment } from \"../../fragments\";\n\nexport const nameFieldFragment = /* GraphQL */ `\n  ... on NameField {\n    adminLabel\n    canPrepopulate\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputs {\n      ... on NameInputProperty {\n        id\n        name\n        autocompleteAttribute\n        customLabel\n        defaultValue\n        label\n        placeholder\n        isHidden\n        key\n        choices {\n          text\n          value\n          isSelected\n        }\n      }\n    }\n    isRequired\n    label\n    subLabelPlacement\n    value\n  }\n`;\n","import { conditionalLogicFragment } from \"../../../fragments\";\n\nexport const pageFieldFragment = /* GraphQL */ `\n  ... on PageField {\n    conditionalLogic {\n      ${conditionalLogicFragment}\n    }\n    nextButton {\n      type\n      text\n      imageUrl\n      conditionalLogic {\n        ${conditionalLogicFragment}\n      }\n    }\n    previousButton {\n      type\n      text\n      imageUrl\n    }\n  }\n`;\n"],"names":["conditionalLogicFragment","submitMutationQuery","gravityFormQuery"],"mappings":"AAAO,MAAMA,EAAyC,sFC0BzCC,EAAoC,oNAWpCC,EAAiC,gPDPI,+BAE5CF,mFAtBgD,+BAEhDA,qbEV4C,oHAM1CA,2MCN2C,8QAgB3CA,wSChBuC,wIAOvCA,6cCPwC,8FAKxCA,2lBCLuC,yDAGvCA,sFCFyC,2KAQzCA,8TCTwC,yHAMxCA,8QL+BwC,sOAaxCA,mOMlDyC,4OAazCA,oSAoB8C,2NAY9CA,kNC7C2C,iGAK3CA,8QCLuC,wHAMvCA,mWCN0C,mMAY5CA,4BCZ+C,+EAI7CA,4PCJuC,6FAKvCA,yfCLuC,yDAGvCA,yGAOEA"}