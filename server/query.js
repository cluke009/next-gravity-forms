const n="\n  actionType\n  logicType\n  rules {\n    fieldId\n    operator\n    value\n  }\n",e="\n  mutation submitForm($id: ID!, $fieldValues: [FormFieldValuesInput]!) {\n    submitGfForm(input: { id: $id, fieldValues: $fieldValues }) {\n      errors {\n        id\n        message\n      }\n    }\n  }\n",a=`\n  query GetGravityForm($id: ID!) {\n    gfForm(id: $id, idType: DATABASE_ID) {\n      databaseId\n      description\n      descriptionPlacement\n      labelPlacement\n      subLabelPlacement\n      title\n      submitButton {\n        ${`\n  conditionalLogic {\n    ${n}\n  }\n  imageUrl\n  text\n  type\n`}\n      }\n      confirmations {\n        ${`\n  conditionalLogic {\n    ${n}\n  }\n  id\n  isActive\n  isDefault\n  message\n  name\n  pageId\n  queryString\n  type\n  url\n  page {\n    node {\n      link\n    }\n  }\n`}\n      }\n      hasHoneypot\n      formFields(first: 999){\n        nodes {\n          displayOnly\n          id: databaseId\n          inputType\n          layoutGridColumnSpan\n          layoutSpacerGridColumnSpan\n          pageNumber\n          type\n          visibility\n          ${`\n  ... on CaptchaField {\n    captchaLanguage\n    captchaTheme\n    captchaType\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    label\n    simpleCaptchaBackgroundColor\n    simpleCaptchaFontColor\n    simpleCaptchaSize\n  }\n`}\n          ${`\n  ... on CheckboxField {\n    adminLabel\n    canPrepopulate\n    checkboxValues {\n      inputId\n      value\n    }\n    choices {\n      ... on CheckboxFieldChoice {\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    hasChoiceValue\n    hasSelectAll\n    inputs {\n      ... on CheckboxInputProperty {\n        id\n        name\n        label\n      }\n    }\n    inputName\n    isRequired\n    label\n  }\n`}\n          ${`\n  ... on DateField {\n    adminLabel\n    calendarIconType\n    calendarIconUrl\n    canPrepopulate\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    dateFormat\n    dateType\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    inputName\n    inputs {\n      ... on DateInputProperty {\n        id\n        autocompleteAttribute\n        customLabel\n        defaultValue\n        label\n        placeholder\n      }\n    }\n    isRequired\n    label\n    placeholder\n    shouldAllowDuplicates\n    subLabelPlacement\n    value\n  }\n`}\n          ${`\n  ... on EmailField {\n    adminLabel\n    canPrepopulate\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    hasEmailConfirmation\n    inputName\n    inputs {\n      ... on EmailInputProperty {\n        id\n        name\n        autocompleteAttribute\n        customLabel\n        defaultValue\n        label\n        placeholder\n      }\n    }\n    isRequired\n    label\n    placeholder\n    shouldAllowDuplicates\n    size\n    subLabelPlacement\n    value\n  }\n`}\n          \n  ... on HiddenField {\n    canPrepopulate\n    defaultValue\n    inputName\n    label\n    value\n  }\n\n          ${`\n  ... on HtmlField {\n    conditionalLogic {\n      ${n}\n    }\n    content\n    cssClass\n    hasMargins\n    label\n  }\n`}\n          ${`\n  ... on NumberField {\n    adminLabel\n    autocompleteAttribute\n    calculationFormula\n    calculationRounding\n    canPrepopulate\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputName\n    isCalculation\n    isRequired\n    label\n    numberFormat\n    placeholder\n    rangeMax\n    rangeMin\n    shouldAllowDuplicates\n    size\n    value\n  }\n`}\n          ${`\n  ... on PhoneField {\n    adminLabel\n    autocompleteAttribute\n    canPrepopulate\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputName\n    isRequired\n    label\n    phoneFormat\n    placeholder\n    shouldAllowDuplicates\n    size\n    value\n  }\n`}\n          ${`\n  ... on RadioField {\n    adminLabel\n    canPrepopulate\n    choices {\n      ... on RadioFieldChoice {\n        isOtherChoice\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    hasChoiceValue\n    hasOtherChoice\n    errorMessage\n    inputName\n    isRequired\n    label\n    shouldAllowDuplicates\n    value\n  }\n`}\n          ${`\n  ... on SelectField {\n    adminLabel\n    autocompleteAttribute\n    canPrepopulate\n    choices {\n      ... on SelectFieldChoice {\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    hasChoiceValue\n    hasEnhancedUI\n    inputName\n    isRequired\n    label\n    placeholder\n    shouldAllowDuplicates\n    size\n    value\n  }\n`}\n          ${`\n  ... on MultiSelectField {\n    adminLabel\n    canPrepopulate\n    choices {\n      ... on MultiSelectFieldChoice {\n        isSelected\n        text\n        value\n      }\n    }\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    hasChoiceValue\n    hasEnhancedUI\n    errorMessage\n    inputName\n    isRequired\n    label\n    size\n    values\n  }\n`}\n          ${`\n  ... on TextAreaField {\n    adminLabel\n    canPrepopulate\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    inputName\n    isRequired\n    label\n    maxLength\n    shouldAllowDuplicates\n    placeholder\n    size\n    hasRichTextEditor\n    value\n  }\n`}\n          ${`\n  ... on TextField {\n    adminLabel\n    autocompleteAttribute\n    canPrepopulate\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    defaultValue\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputMaskValue\n    inputName\n    isPasswordInput\n    isRequired\n    label\n    labelPlacement\n    layoutGridColumnSpan\n    maxLength\n    placeholder\n    shouldAllowDuplicates\n    size\n    value\n  }\n`}\n          ${`\n... on SectionField {\n  cssClass\n  databaseId\n  label\n  type\n  description\n  displayOnly\n  visibility\n  layoutGridColumnSpan\n  layoutSpacerGridColumnSpan\n  conditionalLogic {\n    ${n}\n  }\n}\n`}\n          ${`\n  ... on FileUploadField {\n    adminLabel\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    isRequired\n    label\n    value\n    allowedExtensions\n    canAcceptMultipleFiles\n    inputType\n    maxFileSize\n    maxFiles\n    type\n  }\n`}\n          ${`\n  ... on NameField {\n    adminLabel\n    canPrepopulate\n    conditionalLogic {\n      ${n}\n    }\n    cssClass\n    description\n    descriptionPlacement\n    errorMessage\n    hasAutocomplete\n    inputs {\n      ... on NameInputProperty {\n        id\n        name\n        autocompleteAttribute\n        customLabel\n        defaultValue\n        label\n        placeholder\n        isHidden\n        key\n        choices {\n          text\n          value\n          isSelected\n        }\n      }\n    }\n    isRequired\n    label\n    subLabelPlacement\n    value\n  }\n`}\n          ${`\n  ... on PageField {\n    conditionalLogic {\n      ${n}\n    }\n    nextButton {\n      type\n      text\n      imageUrl\n      conditionalLogic {\n        ${n}\n      }\n    }\n    previousButton {\n      type\n      text\n      imageUrl\n    }\n  }\n`}\n        }\n      }\n      pagination {\n        pageNames\n        lastPageButton {\n          text\n          type\n          imageUrl\n        }\n        hasProgressbarOnConfirmation\n        progressbarCompletionText\n        style\n        type\n        color\n        backgroundColor\n      }\n    }\n    gfSettings {\n      recaptcha {\n        publicKey\n        type\n      }\n      currency\n    }\n  }\n`;export{a as gravityFormQuery,e as submitMutationQuery};
//# sourceMappingURL=query.js.map
